.grid {
  display: grid;
}

/* Space between grid cells, use on grid container. Uses spacing scale. */
@each $spacing-name, $spacing-value in $spacing {
  $i: index($spacing, $spacing-name $spacing-value);

  .gap-#{$i} {
    grid-gap: rem($spacing-value);
    gap: rem($spacing-value); // newer, renamed property not available in all browsers yet.
  }
}

@each $breakpoint-name, $breakpoint-value in $breakpoints {
  @media #{$breakpoint-value} {
    .#{$breakpoint-name}--grid {
      display: grid;
    }

    @each $spacing-name, $spacing-value in $spacing {
      $i: index($spacing, $spacing-name $spacing-value);

      .#{$breakpoint-name}--gap-#{$i} {
        grid-gap: rem($spacing-value);
        gap: rem($spacing-value); // newer, renamed property not available in all browsers yet.
      }
    }
  }
}

/* Sets up a 12 column grid with equal width columns. Use on grid container. */
.g-cols {
  grid-template-columns: repeat($cols, 1fr);
}

/* Number of columns or rows to span. Use on children of .g-cols. */
@for $i from 1 through $cols {
  .g-col-#{$i} {
    grid-column: span $i;
  }

  .g-row-#{$i} {
    grid-row: span $i;
  }
}

@each $breakpoint-name, $breakpoint-value in $breakpoints {
  @media #{$breakpoint-value} {
    .#{$breakpoint-name}--g-cols {
      grid-template-columns: repeat($cols, 1fr);
    }

    @for $i from 1 through $cols {
      .#{$breakpoint-name}--g-col-#{$i} {
        grid-column: span $i;
      }

      .#{$breakpoint-name}--g-row-#{$i} {
        grid-row: span $i;
      }
    }
  }
}

/* Auto-fit columns, use on grid container. Children will be automatically inherit responsive behavior. */
@each $basis-name, $basis-value in $columns-basis {
  .g-cols-auto-#{$basis-name} {
    grid-template-columns: repeat(auto-fit, minmax(rem($basis-value), 1fr));
  }
}
